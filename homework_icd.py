# -*- coding: utf-8 -*-
"""Homework ICD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11TzDT6AhJ28RCSQz6C_Ad5ah0qjyB54q

#**Accenbank Data analysis**

##**Import libraries**
"""

import pandas as pd
import numpy as np

from plotly.subplots import make_subplots
import plotly.graph_objects as go

"""##**Creating Datasets**"""

df_PQRs = pd.read_csv('https://raw.githubusercontent.com/KerenLopez/AccenBank/main/Datasets/PQRs_consolidation%20(1).csv', delimiter='|')
df_products = pd.read_csv('https://raw.githubusercontent.com/KerenLopez/AccenBank/main/Datasets/products%202.csv', delimiter=',')
df_business_seg = pd.read_csv('https://raw.githubusercontent.com/KerenLopez/AccenBank/main/Datasets/business_segment%202.csv', delimiter='|')

"""##**PQRs dataset**

###**Dataset preview**
"""

df_PQRs.shape

df_PQRs.head()

df_PQRs.drop('Unnamed: 0', axis=1, inplace=True)
df_PQRs.drop('Inidicador fecha,,', axis=1, inplace=True)
df_PQRs.drop('DATE', axis=1, inplace=True)

df_PQRs.info()

df_PQRs['Fecha Radicacion Caso'] = pd.to_datetime(df_PQRs['Fecha Radicacion Caso'])

df_PQRs.info()

"""###**Dataset cleaning**"""

df_PQRs_copy = df_PQRs.copy()

df_PQRs_copy.duplicated().sum()

df_PQRs_copy.isna().sum()

df_PQRs_copy['Motivo'].replace(np.nan, 'Sin especificar', inplace=True)

df_PQRs_copy['Motivo'].isna().sum()

df_PQRs_copy['Descripcion Suborigen'].unique()

df_PQRs_copy['Descripcion Suborigen'].nunique()

df_PQRs_copy['Descripcion Suborigen'].replace('Otros', 'OTROS REQUERIMIENTOS', inplace =True)
df_PQRs_copy['Descripcion Suborigen'].replace(np.nan, 'OTROS REQUERIMIENTOS', inplace=True)

df_PQRs_copy['Descripcion Suborigen'].nunique()

df_PQRs_copy['Descripcion Suborigen'].isna().sum()

df_PQRs_copy.shape

df_PQRs_copy.head()

"""##**Products Dataset**

###**Dataset preview**
"""

df_products.shape

df_products.head()

df_products.info()

"""###**Dataset cleaning**"""

df_products_copy = df_products.copy()

df_products_copy.duplicated().sum()

df_products_copy.drop_duplicates(inplace=True)
df_products_copy.reset_index(drop=True)

df_products_copy.duplicated().sum()

df_products_copy.isna().sum()

df_products_copy.shape

df_products_copy.head()

"""##**Business segment Dataset**

###**Dataset preview**
"""

df_business_seg.shape

df_business_seg.head()

df_business_seg.info()

"""###**Dataset cleaning**"""

df_business_seg_copy = df_business_seg.copy()

df_business_seg_copy.duplicated().sum()

df_business_seg_copy.drop_duplicates(inplace=True)
df_business_seg_copy.reset_index(drop=True)

df_business_seg_copy.duplicated().sum()

df_business_seg_copy.isna().sum()

df_business_seg_copy.shape

df_business_seg_copy.head()

"""##**Solving guiding questions**

###**1. What is the distribution of PQRs over time (date)?**
"""

df_amount_by_month=df_PQRs_copy.groupby(df_PQRs_copy['Fecha Radicacion Caso'].dt.to_period('M')).size().reset_index(name='Amount of PQRs')
df_amount_by_month['Fecha Radicacion Caso'] = df_amount_by_month['Fecha Radicacion Caso'].dt.strftime('%Y-%m')

df_amount_by_month.head()

fig_1 = make_subplots(rows = 1, cols=1, subplot_titles=['PQRs by month'])

fig_1.add_trace(go.Bar(x=df_amount_by_month['Fecha Radicacion Caso'], y=df_amount_by_month['Amount of PQRs'], name='', showlegend=False), row=1, col=1)

"""###**2. How are PQRs distributed in different typologies?**"""

df_amount_by_typology=df_PQRs_copy.groupby('Tipologia').size().reset_index(name='Amount of PQRs')

df_amount_by_typology.head()

fig_2 = make_subplots(rows = 1, cols=1, subplot_titles=['PQRs by typology'])

fig_2.add_trace(go.Bar(x=df_amount_by_typology['Tipologia'], y=df_amount_by_typology['Amount of PQRs'], name='', showlegend=False), row=1, col=1)

"""###**4. What analysis do you propose for the development by typology that can extract the greatest possible value from the data?**

Si como banco me interesara retener a mis clientes, prestaría atención a los reclamos que son realizados por cada producto. Por ello, decidí proponer una gráfica por cada tipo de producto, en donde se muestre el porcentaje de reclamos realizados por cada uno de los segmentos de clientes que tiene Accenbank.
"""

df_business_seg_copy['Segmento'].unique()

df_products_copy['Nombre Producto'].unique()

df_merged = pd.merge(pd.merge(df_business_seg_copy, df_PQRs_copy, on='ID Cliente 2', how='inner'), df_products_copy, on='ID Cliente 2', how='inner')

df_merged.head()

df_merged.shape

df_grouped=df_merged.groupby(['Segmento','Tipologia', 'Nombre Producto']).size().reset_index(name='Amount of PQRs')

df_grouped.head()

df_grouped.shape

df_claims = df_grouped[df_grouped['Tipologia']=='Reclamo']

df_claims.head()

df_claims.shape

df_distribution = df_claims.pivot_table(index=['Segmento'], columns='Nombre Producto', values='Amount of PQRs', fill_value=0).reset_index()

df_distribution.head()

df_distribution.shape

df_distribution.info()

fig_3 = make_subplots(rows=4, cols=4, subplot_titles=df_distribution.columns[1:], specs=[[{'type':'pie'}]*4]*4, vertical_spacing=0.07)

for column_num in range(1,5):
  for row_num in range(1,5):
    values = df_distribution.iloc[row_num - 1, 1:].values
    fig_3.add_trace(
        go.Pie(labels=df_distribution['Segmento'], values=values, name=''),
        row=row_num, col=column_num
    )

fig_3.update_layout(autosize=True, height=1500, width = 1500, title='Porcentajes de reclamos por tipo de producto y segmento de cliente', margin=dict(t=200) )

"""###**5. What are the most consulted products in the Bank's database?**"""

df_grouped_2=df_merged.groupby(['Tipologia', 'Nombre Producto']).size().reset_index(name='Amount of PQRs')

df_grouped_2.head()

fig_4 = make_subplots(rows=1, cols=1, subplot_titles=['Amount of PQRs by product'], vertical_spacing=0.07, specs=[[{'type':'pie'}]])

fig_4.add_trace(go.Pie(labels=df_grouped_2['Nombre Producto'], values=df_grouped_2['Amount of PQRs'], name=''), row=1, col=1)

"""###**6. What is the distribution of PQRs by contact channel?**"""

df_PQRs_copy['CANAL1'].unique()

df_grouped_3 = df_PQRs_copy.groupby('CANAL1').size().reset_index(name='Amount of PQRs')

df_grouped_3.head()

df_grouped_3.shape

fig_5= make_subplots(rows = 1, cols=1, subplot_titles=['PQRs by contact channel'])

fig_5.add_trace(go.Bar(x=df_grouped_3['CANAL1'], y=df_grouped_3['Amount of PQRs'], name='', showlegend=False), row=1, col=1)

"""###**7. What would you propose to improve the user experience and the way the bank manages PQRs?**

Se propone revisar los servicios con PQRs que tuvieron que escalar por algún ente regulatorio o gubernamental (Defensoria, Superfinanciera y Presidencia). Además, podrían verse aquellos servicios que tuvieron PQRs que tuvieron que escalar vía radicado, es decir, que demandaron mayor tiempo de espera por parte de los clientes para encontrar una solución.
"""

df_PQRs_copy['CANAL2'].unique()

df_PQRs_copy['Atencion'].unique()

df_grouped_4 = df_merged.groupby(['CANAL2', 'Nombre Producto']).size().reset_index(name='Amount of PQRs')

categories = ['Defensoria', 'Superfinanciera', 'Presidencia']
df_grouped_4 = df_grouped_4[df_grouped_4['CANAL2'].isin(categories)]

df_grouped_4.head()

df_grouped_4.shape

df_grouped_5 = df_merged.groupby(['Atencion', 'Nombre Producto']).size().reset_index(name='Amount of PQRs')

df_grouped_5 = df_grouped_5[df_grouped_5['Atencion']=='Back Service']

df_grouped_5.head()

df_grouped_5.shape

fig_6 = make_subplots(rows=1, cols=2, subplot_titles=[' PQRs that had to be escalated by a regulatory or governmental entity', ' PQRs that had to escalate via radicado'], vertical_spacing=0.07, specs=[[{'type':'pie'}]*2]*1)

fig_6.add_trace(go.Pie(labels=df_grouped_4['Nombre Producto'], values=df_grouped_4['Amount of PQRs'], name=''), row=1, col=1)
fig_6.add_trace(go.Pie(labels=df_grouped_5['Nombre Producto'], values=df_grouped_5['Amount of PQRs'], name=''), row=1, col=2)

"""##**Creating the dashboard with plotly**

###**Installing and importing libraries**
"""
from dash import Dash
import dash_html_components as html
import dash_core_components as dcc

"""###**Making the app**"""

app = Dash(__name__)
server=app.server
logo_link = 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Accenture.svg/2560px-Accenture.svg.png'

header_content = html.Div(
    children=[
        html.H1('AccenBank', style={'color': 'white'}),
        html.P('Bienvenido al dashboard', style={'color': 'white'}),
    ],
    style={'background-color': '#c8a2c8', 'padding': '20px'}
)

footer_content = html.Div(
    children=[
        html.P('Realizado por Keren López', style={'color': 'white'}),
    ],
    style={'background-color': '#c8a2c8', 'padding': '5px', 'position': 'fixed', 'bottom': '0', 'width': '100%', 'text-align': 'center'}
)


app.layout = html.Div(children=[
    header_content,

    html.Div([
      html.Img(src=logo_link, style={'width':'100px', 'position': 'absolute', 'top': '20px', 'right': '20px', 'padding': '20px'}),

      html.Br(),

      dcc.Graph(id='line_graph_1', figure=fig_1),

      html.Br(),

      dcc.Graph(id='line_graph_2', figure=fig_2),

      html.Br(),

      dcc.Graph(id='line_graph_3', figure=fig_3),

      html.Br(),

      dcc.Graph(id='line_graph_4', figure=fig_4),

      html.Br(),

      dcc.Graph(id='line_graph_5', figure=fig_5),

      html.Br(),

      dcc.Graph(id='line_graph_6', figure=fig_6),

      html.Br(),

      footer_content

      ])
  ],

  style={'text-align':'center', 'font-size':22, 'background-color':'white'})

if __name__ =='__main__':
    app.run_server(mode="external")
